components:

  parameters:
    personID:
      description: ID of the Person
      in: path
      name: personID
      required: true
      schema:
        $ref: '#/components/schemas/UUID' 

  responses:
    404NotFound:
      description: Person with the specified ID was not found

    5XXInternalServerError:
      description: Internal server error

  schemas:
    Age:
      example: 42
      maximum: 125 # the oldest person ever was 122 y/o
      minimum: 0
      type:    integer

    CountryCode:
      description: Country code by ISO 3166-1 alpha-2
      example:   RU
      maxLength: 2
      minLength: 2
      pattern:   '^[A-Z]{2}$'
      type:      string
    
    PaginationOffsetLimit:
      properties:
        current_limit:
          minimum: 0
          type: integer
        current_offset:
          minimum: 0
          type: integer
        total_items:
          minimum: 0
          type: integer
      type: object

    PersonBase:
      properties:
        name:
          example: Dmitriy
          minLength: 1
          type:    string
        patronymic:
          example: Vasilevich
          type: string
        surname:
          example: Ushakov
          minLength: 1
          type:    string 
      type: object


    PersonFull:
      allOf:
        - $ref: '#/components/schemas/PersonPartial'
        # TODO: check if this actually works (both in spec and in oapi-codegen)
        - required:
            - id
            - name
            - surname
            - patronymic
            - age
            - nationality
            - sex
          type: object

    PersonPage:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationOffsetLimit'
        people:
          items:
            $ref: '#/components/schemas/PersonFull'
          type: array
      type: object

    PersonPartial:
      allOf:
        - $ref: '#/components/schemas/PersonBase'
        - properties:
            age:
              $ref: '#/components/schemas/Age'
            id:
              $ref: '#/components/schemas/UUID'
              readonly: true
            nationality:
              $ref: '#/components/schemas/CountryCode'
            sex:
              enum:
                - male
                - female
              example: male
              type: string
          type: object


    PersonPostData:
      allOf:
        - $ref: '#/components/schemas/PersonBase'
      required:
        - name
        - patronymic
        - surname

    UUID:
      example: c33f4ac4-435a-46f1-b225-5956b1c9c2c5
      maxLength: 36
      minLength: 36
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      type: string
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/google/uuid

  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
    

info:
  description: This is a test project for EffectiveMobile
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  title: PersonalInfo API
  version: 0.0.0
openapi: 3.0.3

paths:
  /person:
    get:
      operationId: personList
      parameters:
        - description: Part of Person's name (case-insensitive)
          in: query
          name: name
          schema:
            minLength: 1
            type: string
        - description: Part of Person's surname (case-insensitive)
          in: query
          name: surname
          schema:
            minLength: 1
            type: string
        - description: Part of Person's patronymic (case-insensitive, empty for no patronymic)
          in: query
          name: patronymic
          schema:
            type: string
        - description: Minimum for Person's age
          in: query
          name: age_min
          schema:
            $ref: '#/components/schemas/Age'
            default: 0
        - description: Maximum for Person's age
          in: query
          name: age_max
          schema:
            $ref: '#/components/schemas/Age'
        - description: Person's nationality (ISO 3166-1 alpha-2 code)
          in: query
          name: nationality
          schema:
            $ref: '#/components/schemas/CountryCode'
        - description: The number of records to skip
          in: query
          name: offset
          schema:
            default: 0
            minimum: 0
            type: integer
        - description: The numbers of records to return (all if 0)
          in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPage'
          description: A page of Person
        '400':
          description: Invalid query parameters
        '5XX':
          $ref: '#/components/responses/5XXInternalServerError'
      summary: List Person records    

    post:
      operationId: personPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPostData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUID'
          description: Person was created successfully
        '400':
          description: Invalid Person format
        '5XX':
          $ref: '#/components/responses/5XXInternalServerError'
      summary: Create a Person

  /person/{personID}:
    get:
      operationId: personGet
      parameters:
        - $ref: '#/components/parameters/personID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonFull'
          description: The Person with specified id
        '400':
          description: The specified ID is not a valid UUID
        '404':
          $ref: '#/components/responses/404NotFound'
        '5XX':
          $ref: '#/components/responses/5XXInternalServerError'
      summary: Get a Person by id    

    patch:
      operationId: personPatch
      parameters:
        - $ref: '#/components/parameters/personID'
      requestBody:
        content:
          application/json:
            examples:
              Age:
                value:
                  age: 46 
              Full:
                value:
                  age:         46
                  name:        John
                  nationality: US
                  patronymic:  ''
                  sex:         male
                  surname:     Cena

              NameAndSurname:
                value:
                  name:    John
                  surname: Cena
            schema:
              $ref: '#/components/schemas/PersonPartial'
        required: true
      responses:
        '200':
          description: Person was updated successfully
        '400':
          description: Invalid Person format
        '404':
          $ref: '#/components/responses/404NotFound'
        '5XX':
          $ref: '#/components/responses/5XXInternalServerError'
      summary: Update a part of Person (via JSON Merge Patch)

    put:
      operationId: personPut
      parameters:
        - $ref: '#/components/parameters/personID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonFull'
        required: true
      responses:
        '200':
          description: Person was replaced successfully
        '400':
          description: Invalid Person format
        '404':
          $ref: '#/components/responses/404NotFound'
        '5XX':
          $ref: '#/components/responses/5XXInternalServerError'
      summary: Replace a Person

security:
  - basicAuth: []

servers:
  - description: Local API
    url: http://localhost/api/v0

