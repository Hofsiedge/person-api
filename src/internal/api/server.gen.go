// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Person records
	// (GET /person)
	PersonList(w http.ResponseWriter, r *http.Request, params PersonListParams)
	// Create a Person
	// (POST /person)
	PersonPost(w http.ResponseWriter, r *http.Request)
	// Delete a Person by id
	// (DELETE /person/{personID})
	PersonDelete(w http.ResponseWriter, r *http.Request, personID PersonID)
	// Get a Person by id
	// (GET /person/{personID})
	PersonGet(w http.ResponseWriter, r *http.Request, personID PersonID)
	// Update a part of Person (via JSON Merge Patch)
	// (PATCH /person/{personID})
	PersonPatch(w http.ResponseWriter, r *http.Request, personID PersonID)
	// Replace a Person
	// (PUT /person/{personID})
	PersonPut(w http.ResponseWriter, r *http.Request, personID PersonID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PersonList operation middleware
func (siw *ServerInterfaceWrapper) PersonList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PersonListParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "surname" -------------

	err = runtime.BindQueryParameter("form", true, false, "surname", r.URL.Query(), &params.Surname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "surname", Err: err})
		return
	}

	// ------------- Optional query parameter "patronymic" -------------

	err = runtime.BindQueryParameter("form", true, false, "patronymic", r.URL.Query(), &params.Patronymic)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patronymic", Err: err})
		return
	}

	// ------------- Optional query parameter "age_min" -------------

	err = runtime.BindQueryParameter("form", true, false, "age_min", r.URL.Query(), &params.AgeMin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "age_min", Err: err})
		return
	}

	// ------------- Optional query parameter "age_max" -------------

	err = runtime.BindQueryParameter("form", true, false, "age_max", r.URL.Query(), &params.AgeMax)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "age_max", Err: err})
		return
	}

	// ------------- Optional query parameter "nationality" -------------

	err = runtime.BindQueryParameter("form", true, false, "nationality", r.URL.Query(), &params.Nationality)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nationality", Err: err})
		return
	}

	// ------------- Optional query parameter "sex" -------------

	err = runtime.BindQueryParameter("form", true, false, "sex", r.URL.Query(), &params.Sex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sex", Err: err})
		return
	}

	// ------------- Optional query parameter "threshold" -------------

	err = runtime.BindQueryParameter("form", true, false, "threshold", r.URL.Query(), &params.Threshold)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "threshold", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PersonPost operation middleware
func (siw *ServerInterfaceWrapper) PersonPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PersonDelete operation middleware
func (siw *ServerInterfaceWrapper) PersonDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "personID" -------------
	var personID PersonID

	err = runtime.BindStyledParameter("simple", false, "personID", mux.Vars(r)["personID"], &personID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "personID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonDelete(w, r, personID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PersonGet operation middleware
func (siw *ServerInterfaceWrapper) PersonGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "personID" -------------
	var personID PersonID

	err = runtime.BindStyledParameter("simple", false, "personID", mux.Vars(r)["personID"], &personID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "personID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonGet(w, r, personID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PersonPatch operation middleware
func (siw *ServerInterfaceWrapper) PersonPatch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "personID" -------------
	var personID PersonID

	err = runtime.BindStyledParameter("simple", false, "personID", mux.Vars(r)["personID"], &personID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "personID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonPatch(w, r, personID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PersonPut operation middleware
func (siw *ServerInterfaceWrapper) PersonPut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "personID" -------------
	var personID PersonID

	err = runtime.BindStyledParameter("simple", false, "personID", mux.Vars(r)["personID"], &personID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "personID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonPut(w, r, personID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/person", wrapper.PersonList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/person", wrapper.PersonPost).Methods("POST")

	r.HandleFunc(options.BaseURL+"/person/{personID}", wrapper.PersonDelete).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/person/{personID}", wrapper.PersonGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/person/{personID}", wrapper.PersonPatch).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/person/{personID}", wrapper.PersonPut).Methods("PUT")

	return r
}

type N404NotFoundResponse struct {
}

type N5XXInternalServerErrorResponse struct {
}

type PersonListRequestObject struct {
	Params PersonListParams
}

type PersonListResponseObject interface {
	VisitPersonListResponse(w http.ResponseWriter) error
}

type PersonList200JSONResponse PersonPage

func (response PersonList200JSONResponse) VisitPersonListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PersonList400Response struct {
}

func (response PersonList400Response) VisitPersonListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PersonList5XXResponse struct {
	StatusCode int
}

func (response PersonList5XXResponse) VisitPersonListResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PersonPostRequestObject struct {
	Body *PersonPostJSONRequestBody
}

type PersonPostResponseObject interface {
	VisitPersonPostResponse(w http.ResponseWriter) error
}

type PersonPost201JSONResponse UUID

func (response PersonPost201JSONResponse) VisitPersonPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PersonPost400Response struct {
}

func (response PersonPost400Response) VisitPersonPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PersonPost422Response struct {
}

func (response PersonPost422Response) VisitPersonPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type PersonPost503ResponseHeaders struct {
	RetryAfter int
}

type PersonPost503Response struct {
	Headers PersonPost503ResponseHeaders
}

func (response PersonPost503Response) VisitPersonPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)
	return nil
}

type PersonPost5XXResponse struct {
	StatusCode int
}

func (response PersonPost5XXResponse) VisitPersonPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PersonDeleteRequestObject struct {
	PersonID PersonID `json:"personID"`
}

type PersonDeleteResponseObject interface {
	VisitPersonDeleteResponse(w http.ResponseWriter) error
}

type PersonDelete200Response struct {
}

func (response PersonDelete200Response) VisitPersonDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PersonDelete400Response struct {
}

func (response PersonDelete400Response) VisitPersonDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PersonDelete404Response = N404NotFoundResponse

func (response PersonDelete404Response) VisitPersonDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PersonDelete5XXResponse struct {
	StatusCode int
}

func (response PersonDelete5XXResponse) VisitPersonDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PersonGetRequestObject struct {
	PersonID PersonID `json:"personID"`
}

type PersonGetResponseObject interface {
	VisitPersonGetResponse(w http.ResponseWriter) error
}

type PersonGet200JSONResponse PersonFullWithID

func (response PersonGet200JSONResponse) VisitPersonGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PersonGet400Response struct {
}

func (response PersonGet400Response) VisitPersonGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PersonGet404Response = N404NotFoundResponse

func (response PersonGet404Response) VisitPersonGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PersonGet5XXResponse struct {
	StatusCode int
}

func (response PersonGet5XXResponse) VisitPersonGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PersonPatchRequestObject struct {
	PersonID PersonID `json:"personID"`
	Body     *PersonPatchJSONRequestBody
}

type PersonPatchResponseObject interface {
	VisitPersonPatchResponse(w http.ResponseWriter) error
}

type PersonPatch200Response struct {
}

func (response PersonPatch200Response) VisitPersonPatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PersonPatch400Response struct {
}

func (response PersonPatch400Response) VisitPersonPatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PersonPatch404Response = N404NotFoundResponse

func (response PersonPatch404Response) VisitPersonPatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PersonPatch5XXResponse struct {
	StatusCode int
}

func (response PersonPatch5XXResponse) VisitPersonPatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PersonPutRequestObject struct {
	PersonID PersonID `json:"personID"`
	Body     *PersonPutJSONRequestBody
}

type PersonPutResponseObject interface {
	VisitPersonPutResponse(w http.ResponseWriter) error
}

type PersonPut200Response struct {
}

func (response PersonPut200Response) VisitPersonPutResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PersonPut400Response struct {
}

func (response PersonPut400Response) VisitPersonPutResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PersonPut404Response = N404NotFoundResponse

func (response PersonPut404Response) VisitPersonPutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PersonPut5XXResponse struct {
	StatusCode int
}

func (response PersonPut5XXResponse) VisitPersonPutResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List Person records
	// (GET /person)
	PersonList(ctx context.Context, request PersonListRequestObject) (PersonListResponseObject, error)
	// Create a Person
	// (POST /person)
	PersonPost(ctx context.Context, request PersonPostRequestObject) (PersonPostResponseObject, error)
	// Delete a Person by id
	// (DELETE /person/{personID})
	PersonDelete(ctx context.Context, request PersonDeleteRequestObject) (PersonDeleteResponseObject, error)
	// Get a Person by id
	// (GET /person/{personID})
	PersonGet(ctx context.Context, request PersonGetRequestObject) (PersonGetResponseObject, error)
	// Update a part of Person (via JSON Merge Patch)
	// (PATCH /person/{personID})
	PersonPatch(ctx context.Context, request PersonPatchRequestObject) (PersonPatchResponseObject, error)
	// Replace a Person
	// (PUT /person/{personID})
	PersonPut(ctx context.Context, request PersonPutRequestObject) (PersonPutResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PersonList operation middleware
func (sh *strictHandler) PersonList(w http.ResponseWriter, r *http.Request, params PersonListParams) {
	var request PersonListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonList(ctx, request.(PersonListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonListResponseObject); ok {
		if err := validResponse.VisitPersonListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonPost operation middleware
func (sh *strictHandler) PersonPost(w http.ResponseWriter, r *http.Request) {
	var request PersonPostRequestObject

	var body PersonPostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonPost(ctx, request.(PersonPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonPost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonPostResponseObject); ok {
		if err := validResponse.VisitPersonPostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonDelete operation middleware
func (sh *strictHandler) PersonDelete(w http.ResponseWriter, r *http.Request, personID PersonID) {
	var request PersonDeleteRequestObject

	request.PersonID = personID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonDelete(ctx, request.(PersonDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonDeleteResponseObject); ok {
		if err := validResponse.VisitPersonDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonGet operation middleware
func (sh *strictHandler) PersonGet(w http.ResponseWriter, r *http.Request, personID PersonID) {
	var request PersonGetRequestObject

	request.PersonID = personID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonGet(ctx, request.(PersonGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonGetResponseObject); ok {
		if err := validResponse.VisitPersonGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonPatch operation middleware
func (sh *strictHandler) PersonPatch(w http.ResponseWriter, r *http.Request, personID PersonID) {
	var request PersonPatchRequestObject

	request.PersonID = personID

	var body PersonPatchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonPatch(ctx, request.(PersonPatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonPatch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonPatchResponseObject); ok {
		if err := validResponse.VisitPersonPatchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonPut operation middleware
func (sh *strictHandler) PersonPut(w http.ResponseWriter, r *http.Request, personID PersonID) {
	var request PersonPutRequestObject

	request.PersonID = personID

	var body PersonPutJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonPut(ctx, request.(PersonPutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonPut")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonPutResponseObject); ok {
		if err := validResponse.VisitPersonPutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
